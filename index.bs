<pre class='metadata'>
Title: Orchestrator for a decentralized Web network
Shortname: orchestrator
Level: 1
Status: LS
URL: https://mellonscholarlycommunication.github.io/spec-orchestrator
Editor: Miel Vander Sande, meemoo - [Flemish Institute for Archiving](https://meemoo.be), miel.vandersande@meemoo.be
Editor: Patrick Hochstenbach, Ghent University, patrick.hochstenbach@ugent.be
Editor: Ruben Dedecker, Ghent University, ruben.dedecker@ugent.be
Editor: Jeroen Werbrouck, Ghent University, Jeroen.Werbrouck@ugent.be
Abstract: This specification describes the implementation requirements for the Ochestrator component.
Markup Shorthands: markdown yes
</pre>

Set of documents {#set}
=======================

This document is one of the specifications produced by the **ResearcherPod** and **ErfgoedPod** project:

1. [Overview](/spec-overview/) 
2. [Orchestrator](/spec-orchestrator/) (this document)
3. [Data Pod](/spec-datapod/)
4. [Rule language](/spec-rulelanguage/)
5. [Artefact Lifecycle Event Log](/spec-eventlog/)

Introduction {#intro}
=====================

In a [Solid decentralized network](https://solidproject.org/), data, and services the services that use them, do not resort in one place, but are intentionally distributed.
As a result, actors in the network, such as institutions or service providers, need to potentionally involve and communicate with multiple services in order to execute a business process or workflow, 
where each services executes a dedicated task (eg. registering or archiving a dataset).
Hence, to avoid excessive manual work, this document specifies the Orchestrator component, which is able to automate such task orchestration.

Network actors maintain their data in a [=Data Pod=], 
which is by design a "passive" component: it offers secure data access via Linked Data Platform [[!LDP]] to others, but cannot perform actions such as invoking remote services on the network or reading and writing network content.
These capabilities are therefore delegated to the Orchestrator. On behalf of the actor, the Orchestrator responds to [=triggers=] by executing a number of [=actions=] dictated by a machine-readable [=policy=].
Possible triggers are incoming notifications, perceived changes in the data, or manual invocation by an actor.
Possible actions are sending notifications to other actors, requesting access to resources in a [=Data Pod=], reading data from a [=Data Pod=], or writing data to a [=Data Pod=].

The Orchestrator implements the autonomous agent model: an intelligent software instance that operates on an actor's behalf but without any interference of that actor.
In practice, an Orchestrator is dedicated to a single [=Data Pod=] for which is has access rights to all relevant resources, including the Linked Data Notification [[!LDN]] [=inbox=]. 
Its autonomy is supplied by the [=Policy=], which dictates business rules in a declarative manner using a [=policy language=].

The remainder of this document specifies the requirements for implementing an [=Orchestrator=] component. 

# Definitions

This document uses the following defined terms from [[spec-overview]]:

- <dfn export>Actor</dfn>
- <dfn export>Artefact</dfn>
- <dfn export>Maintainer</dfn>
- <dfn export>Data Pod</dfn>
- <dfn export>Inbox</dfn>
- <dfn export>Artefact Lifecycle Event Log</dfn>
- <dfn export>Service Hub</dfn>
- <dfn export>Policy</dfn>
- <dfn export>Dashboard</dfn>

High-level overview {#high-level}
=====================

An <dfn export>Orchestrator</dfn> is an [=Autonomous Agent=] dedicated to a single [=Data Pod=], [=Service Hub=], or any other actor hosting the [=Artefact Lifecycle Event Log=] and a [=Inbox=] resources.
It interprets and executes business rules described in a [=policy=]. 
The Orchestrator watches the [=Inbox=] for possible triggers, while it records the actions it takes to the to the [=Artefact Lifecycle Event Log=]. 

## Perspectives

From a [=Data Pod=] perspective, 
the [=Orchestrator=] participates in the network on behalf of the [=Data Pod=]'s owner or [=Maintainer=].
At instantiation time, 
a [=Maintainer=] connects the [=Orchestrator=] with the [=Artefact Lifecycle Event Log=] and [=Inbox=] resources from its [=Data Pod=], 
which it watches in order to receive a possible [=Trigger=].
This an [=Orchestrator=] instance dedicated to a single [=Data Pod=].
From that point on, 
the [=Maintainer=] only interacts _indirectly_ with the [=Orchestrator=] via the [=Data Pod=], by using a [=Dashboard=] to append the [=Artefact Lifecycle Event Log=] and/or [=Inbox=]. 

When a trigger arrives,
the [=Orchestrator=] consults the [=policy=] - a set of business rules fixed an maintained by the [=Maintainer=] using the [=Dashboard=],
which results in zero or more [=actions=] to take.
An [=Action=] involves reading resources from or sending notifications to [=data pods=] (including the one it's connected to) or [=Service Hubs=].

The [=Orchestrator=] records every taken [=action=] in the [=data pod=]'s [=Artefact Lifecycle Event Log=].
When the [=Orchestrator=] requires input from the [=Maintainer=], 
it can communicate this via the [=Artefact Lifecycle Event Log=],
which is shared with the [=Dashboard=].
The [=Dashboard=] presents this event to the [=Maintainer=] in an actionable way, resulting in a new [=trigger=].

<pre class='include'>
path: images/high-level.svg
</pre>

From a [=Service Hub=] perspective,
the [=Orchestrator=] establishes automated response to notifications from other network [=actors=] and [=orchestrators=] in context of the provided service. 
As a possible side-effect, it can also actively consults additional [=actors=] in order to complete the service.
The [=Orchestrator=] responds by delivering a new notification in the [=inbox=] of the actor that invoked the service.
It is the [=policy=] that dictates what response to construct and what consecutive [=actions=] (reading resources from or sending notifications to [=data pods=] or other [=service hubs=]) need to be performed.

<pre class='include'>
path: images/high-level-servicehub.svg
</pre>


## Common interaction pattern

A common activity is the [=Maintainer=] of a [=Data Pod=] invoking a service provided by a [=Service Hub=].
Both [=actors=] can be considered operating an [=orchestrator=] to automate their participation in the network.
Hence, a common interaction pattern is as follows:

1. The [=maintainer=] performs an action that affects or interests other actors in the network (eg. adding a new artefact in the data pod).
2. The [=maintainer=] uses the [=Dashboard=] to reflect this action on the [=Artefact Lifecycle Event Log=] `event log A` that is stored in the [=Data Pod=].
3. The new event triggers the `Orchestrator A` to take consecutive [=action=].
4. `Orchestrator A` consults its `Policy A` for the received [=trigger=], which dictates that it needs to inform the [=service hub=] about the event.
5. `Orchestrator A` sends a notification to `Inbox B` of the [=service hub=].
6. The notification's reception triggers `Orchestrator B` to take consecutive [=action=].
7. `Orchestrator B` consults its `Policy B` for the received [=trigger=], which dictates that it needs to process the artefact and inform the [=maintainer=] about the outcome.
8. `Orchestrator B` processes the contents of the notification using an internal process (eg. index the new artefact in the repository).
9. When completed, `Orchestrator B` adds to `Event log B` that the contents of the notification have been processed.
10. `Orchestrator B` sends a notification to `Inbox A` of the [=maintainer=].
11. `Orchestrator B` adds to `Event log A` that the original event has been processed by the [=service hub=].
12. The [=Dashboard=] displays `Event log A` to the [=maintainer=] to show that the necessary actions have been taken.

<pre class='include'>
path: images/high-level-comm.svg
</pre>



Creating an orchestrator {#init}
=====================

## Deployment

An Orchestrator MUST be deployable as a <dfn export>local background process</dfn> or as a <dfn export>remote web service</dfn>.
In case of the latter, an actor SHOULD be able to spawn, initialize and trigger the instance over [[!HTTP11]], as defined in [[#init]] and [[#triggers]].
The Orchestrator MAY also serve an [=inbox=] for communicating with third-parties using Linked Data Notifications [[LDN]] .

Example of spawning an orchestrator using Linked Data Notifications:
```

POST /inbox HTTP/1.1
Host: example.org
Content-Type: application/ld+json;profile="https://www.w3.org/ns/activitystreams"
Content-Language: en

{
  "@context": "https://www.w3.org/ns/activitystreams",
  "summary": "Spawn orchestrator",
  "type": "Create",
  "actor": "http://kb.nl#me",
  "object": "http://example.org/orchestrator/1"
}
```

If deployed as a [=local background process=], an (custom) API MUST be present that is able perform these actions.

## Solid app compliance

An orchestrator is a <a href="https://solidproject.org/TR/protocol#solid-app">Solid client</a> and MUST be fully compliant with the [[solid-protocol]] Client-Side Implementation requirements.
Orchestrators SHOULD also implement [[SOLID-OIDC]] to authenticate to most Solid [=data pods=] and implement the client requirements for [[solidwebac]] to receive authorization, such as checking the `WAC-Allow` header value.

## Additional interface 

When a new instance is created, 
an Orchestrator MUST allow actors to supply an [[URI]] pointing to an [=inbox=] to watch and read.
It MAY also allow a list of [[LDP]] <a href="https://www.w3.org/TR/ldp/#ldpr-resource">resources</a> to watch.

Note: MVS: because I'm not sure it's realistic to poll any HTTP resource, I limited the scope to LDP resources. But even then, I'm not sure how you would do this in practice without keeping a lot of state.

Issue: MVS: is this registration of inbox, resources something we want to do at initialization or do we write this in the policy? 

Orchestrators solely execute business logic catured in [=policies=].
Thus, they MUST allow actors to supply one or more [[URI]]s pointing to a [=policy=].
These policies MUST be written in the [=policy language=].
An actor SHOULD supply at least one [=policy=] in order to allow the orchestrator to function.

To operate autonomeously, an Orchestrator has to obtain access to some resources in the [=Data Pod=], 
which <a href="https://solidproject.org/TR/protocol#web-access-control">conforms</a> to the Web Access Control specification [[solidwebac]].
If access is not granted, an Orchestrator MUST request access to the following resources (noted in the <a href="http://www.w3.org/ns/auth/acl">Access Control List (ACL)</a> ontology):

- `acl:Read` to the [=inbox=] resource (discoverable with `http://www.w3.org/ns/ldp#inbox`)
- `acl:Read` and `acl:Write` to the [=Artefact Lifecycle Event Log=] resource.
- `acl:Read` to any watched [[LDP]] resource.

Issue: are there more necessary authorizations?

Triggers {#triggers}
=====================

A <dfn>trigger</dfn> is an event to which an orchestrator can respond by taking [=actions=]. 
An orchestrator MUST respond to the following three types of triggers:

- an new incoming Linked Data Notification [[!LDN]] in the [=inbox=]
- an observed state changes to watched [=data pod=] resources
- a scheduled trigger from the internal time-based event scheduler

## Receving Linked Data Notifications ## {#trigger-ldn}

An orchestrator MUST be a compliant [[!LDN]] [Consumer](https://www.w3.org/TR/ldn/#consumer). 
The Orchestrator MAY advertise multiple inboxes. 
In this case, the Orchestrator MUST retrieve incoming Linked Data Notifications from all advertised inboxes.
Inbox security is discussed in the [security considerations](#security-considerations) sections.

Linked Data Notification triggers are defined as RDF data shapes.
The used data shape MUST conform to either a [shacl](https://www.w3.org/TR/shacl/) shape or a [shex](https://shex.io/) shape.
On receiving a notification, the Orchestrator MUST try to validate the received notification to all notification based triggers in the policies in its policy set.
For this, the Orchestrator MUST provide validation for both[shex](https://www.w3.org/TR/shacl/) shapes and [shex](https://shex.io/) shapes.

Example of a trigger using Linked Data Notifications:
```
{
  "@context": "https://www.example.org/ns/policy",
  "summary": "Linked Data Notification Trigger",
  "type": "NotificationTrigger",
  "shape": "https://mypod.org/shapes/triggershape",
}
```

The following incoming [[!LDN]] using the [[!ACTIVITYSTREAMS-VOCABULARY]] MUST be supported:

- [as:Create](https://www.w3.org/ns/activitystreams#Create)
- [as:Announce](https://www.w3.org/ns/activitystreams#Announce)
- [as:Update](https://www.w3.org/ns/activitystreams#Update)
- [as:Delete](https://www.w3.org/ns/activitystreams#Delete)


## Observing resource state changes  ## {#trigger-resource}
An Orchestrator MAY accept resource stage changes of [Linked Data Platform Resources](https://www.w3.org/TR/ldp/#ldpr) as triggers for policy actions.
In this case, the Orchestrator MUST be granted READ-acess all observed [Linked Data Platform Resources](https://www.w3.org/TR/ldp/#ldpr).
In the case that an observed [Linked Data Platform Resources](https://www.w3.org/TR/ldp/#ldpr) is also a [Linked Data Platform Container](https://www.w3.org/TR/ldp/#ldpc), the orchestrator MUST observe state changes for all [Linked Data Platform Resources](https://www.w3.org/TR/ldp/#ldpr) that are contained by the observed [Linked Data Platform Container](https://www.w3.org/TR/ldp/#ldpc).

The following state changes can be used as triggers:
	- Creation of a resource - can only be observed for an [LDP Container](https://www.w3.org/TR/ldp/#ldpc)
	- Update of a resource 
	- Deletion of a resource

Example of a trigger using resource state changes:
```
{
  "@context": "https://www.example.org/ns/policy",
  "summary": "Linked Data Notification Trigger",
  "type": "StateTrigger",
  "resource": "https://mypod.org/resources/,
  "state": ["Create", "Update"]
}
```



## Scheduled trigger ## {#trigger-schedule}
An Orchestrator MAY accept time scheduled triggers for policy actions.

### datetime trigger
A datetime trigger is a trigger that MUST be evaluated automatically at set points in time, defined by the trigger.
A datetime trigger can define multiple points in time to trigger an action.
All passed ```datetime``` values MUST be valid ```xsd:dateTime``` literals.

Example of a datetime trigger:
``` 
{
  "@context": "https://www.example.org/ns/policy",
  "summary": "Linked Data Notification Trigger",
  "type": "DateTimeTrigger",
  "dateTime":[
    {
      "@value": "2021-12-12T20:20:20.201Z",
      "@type": xsd:dateTime
    }, 
    {
      "@value": "2021-12-12T21:21:21.211Z",
      "@type": xsd:dateTime
    }]
}
```

### time interval trigger
A time interval trigger is a trigger that is fired at set intervals in time.
A time interval trigger MUST trigger an action on every matching time interval during the time the trigger is active and the orchestrator is running.


Example of a time interval trigger:
```
{
  "@context": "https://www.example.org/ns/policy",
  "summary": "Linked Data Notification Trigger",
  "type": "StateTrigger",
  "resource": "https://mypod.org/resources/
  "state": ["Create", "Update"]
}
```

Actions {#actions}
=====================

An <dfn>action</dfn> is a form of interation with other actors or resources in the network.
Orchestrator performs such actions on behalf of a network [=actor=]. 
There are three types of actions that an orchestrator can take: 
-  sending Linked Data Notifications [[!LDN]] to the inbox of a [=Service Hub=] or [=Data Pod=].
-  manipulating [[!LDP]] resources of a [=Data Pod=].
-  reading any [[!HTTP11]] resource 


## Sending Linked Data notifications

An orchestrator MUST be a compliant [[LDN]] [Sender](https://www.w3.org/TR/ldn/#sender). 
It MUST be able to send the following notifications from the [[ACTIVITYSTREAMS-VOCABULARY]]:

- [as:Create](https://www.w3.org/ns/activitystreams#Create)
- [as:Announce](https://www.w3.org/ns/activitystreams#Announce)
- [as:Update](https://www.w3.org/ns/activitystreams#Update)
- [as:Delete](https://www.w3.org/ns/activitystreams#Delete)

Within a notification, the following [Actor type](https://www.w3.org/TR/activitystreams-core/#actors) mapping MUST be used:
- [=Service Hub=] --> [as:Service](https://www.w3.org/ns/activitystreams#Service)
- [=Maintainer=] --> [as:Organization](https://www.w3.org/ns/activitystreams#Organization) or [as:Person](https://www.w3.org/ns/activitystreams#Person)

The object MUST contain the artefact to which the action has effect.
It SHOULD have one of the following types:
- https://www.w3.org/ns/activitystreams#Object


Example:

``` json

{
  "@context": "https://www.w3.org/ns/activitystreams",
  "summary": "Koninklijke Bibliotheek announces Alba",
  "type": "Create",
  "actor": {
    "@context": "https://schema.org/",
    "@type": "Organization",
    "name": "Koninklijke Bibliotheek",
    "@id": "https://www.kb.nl/"
  },
  "object": {
    "@context": "https://schema.org/",
    "@type": "Dataset",
    "@id": "https://data.bibliotheken.nl/doc/dataset/rise-alba",
  },
  "origin": {
    "@context": "https://schema.org/",
    "@id": "http://example.org/Adlib",
    "@type": "SoftwareApplication"
  },
  "updated": "2021-01-28T19:56:20.114Z"
}

```

## Manipulating LDP resources

An Orchestrator MUST implement the following [[HTTP11]]  :

Issue: TODO

- Create: `PUT`
- Read: `GET`
- Update: `PATCH`
- Delete: `DELETE`

## Reading HTTP resources

An Orchestrator MUST implement the following :

Issue: TODO

- Read: `GET`






Policy {#policy-sec}
=====================

Set of rules that dictates what actions need to be taken when a lifecycle event occurs. These originate from the digital heritage network participation agreement, possibly amended with procedures imposed by the institution, the discipline, or personal preference.


Security considerations {#security-considerations}
==================================================

## Authenticated Inboxes
In case the Orchestrator supports [triggers from incoming Linked Data Notifications](#trigger-ldn), the Orchestrator SHOULD make use of [authenticated inboxes](https://www.w3.org/TR/ldn/#authenticated-inboxes) as described by the [Linked Data Notifications](https://www.w3.org/TR/ldn/) specification.
Requiring authentication on the pod inbox can prevent unwanted parties from forging notifications to be processed by the Orchestrator.

## Signed notifications
Instead of requiring authentication to post notifications to the pod inbox, the Orchestrator may require notifications to be singed by the sender before accepting notifications.
There was an upcoming panel on signed notifications - TODO



Appendix A: Implementation details {#implementation-details}
============================================================

## Retrieving inbox notifications

## Observing LDP resource state updates

## Time based trigger implementations


<pre class=biblio>
{
	"solid-oidc": {
		"authors": [
			"Aaron Coburn (Inrupt)",
			"elf Pavlik",
			"Dmitri Zagidulin" 
		],
		"href": "https://solid.github.io/authentication-panel/solid-oidc/",
		"title": "SOLID-OIDC",
		"status": "Editor’s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
	"solid-protocol": {
		"authors": [
			"Sarven Capadisli",
			"Tim Berners-Lee",
			"Ruben Verborgh",
			"Kjetil Kjernsmo",
			"Justin Bingham",
			"Dmitri Zagidulin"
		],
		"href": "https://solidproject.org/TR/protocol/",
		"title": "The Solid Protocol",
		"status": "Editor’s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
  "spec-overview": {
		"authors": [
      "Miel Vander Sande"
    ],
		"href": "http://mellonscholarlycommunication.github.io/spec-overview/",
		"title": "Overview of the ResearcherPod specifications",
		"status": "Editor’s Draft",
		"publisher": "ResearcherPod project"
	}
}
</pre>